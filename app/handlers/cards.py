from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text


from app.orm import session, User, Dog, Sport, Card, CardType
from app import logger


class TaskStates(StatesGroup):
    '''–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –∑–∞–¥–∞—á–∞–º'''
    waiting_for_sport = State()
    waiting_for_card_type = State()
    waiting_for_card = State()

async def new_task(message: types.Message, state: FSMContext):
    '''
        –í–∑—è—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    '''
    # 1. –í—ã–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
    # 2. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
    # 3. –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    # 4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É —Ä–µ—à–∏—Ç—å

    sports = session.query(Sport).all()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞"]
    for sport in sports:
        buttons.append(sport.__repr__())
    

    keyboard.add(*buttons)

    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞", reply_markup=keyboard)
    await state.set_state(TaskStates.waiting_for_sport.state)


async def card_type_select(message: types.Message, state: FSMContext):
    '''
        –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–æ—Ä—Ç–µ
    '''
    sport = session.query(Sport).filter_by(name=message.text)

    if not sport.first():
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ")
        return

    await state.update_data(chosen_sport=sport[0].id)

    # –¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫
    sport = session.query(Sport).filter_by(name=message.text).first()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞"]

    # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫
    buttons.extend([r.__repr__() for r in sport.card_types])
    

    keyboard.add(*buttons)
    
    await state.set_state(TaskStates.waiting_for_card_type.state)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∫–∞—Ä—Ç–æ—á–∫–∏", reply_markup=keyboard)
    
async def card_select(message: types.Message, state: FSMContext):
    '''
        –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    '''

    card_type = session.query(CardType).filter_by(name=message.text)
    # –ö–∞—Ä—Ç–æ—á–∫–∏
    if not card_type.first():
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ")
        return
    
    # –ó–∞–Ω–µ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ state
    await state.update_data(chosen_card_type=card_type[0].card_type)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    cards = session.query(Card).filter_by(card_type=card_type[0].card_type)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç–º–µ–Ω–∞"]
    buttons.extend([r.__repr__() for r in cards])

    keyboard.add(*buttons)
    
    await state.set_state(TaskStates.waiting_for_card.state)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É", reply_markup=keyboard)



def register_handlers_cards(dp: Dispatcher):
    '''
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    '''
    dp.register_message_handler(new_task, commands="go", state="*")
    dp.register_message_handler(new_task, Text(equals="üêæ –ò–≥—Ä–∞—Ç—å", ignore_case=True), state="*")
    dp.register_message_handler(card_type_select, state=TaskStates.waiting_for_sport)
    dp.register_message_handler(card_select, state=TaskStates.waiting_for_card_type)
    
