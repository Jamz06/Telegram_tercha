import logging
import os
from aiogram import Bot, Dispatcher, executor, types

from orm import session, User

# Configure logging
logging.basicConfig(level=logging.INFO)

token = os.environ.get('BOT_TOKEN', False) 
if token:
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=token, parse_mode='HTML')
    dp = Dispatcher(bot)
else:
    logging.error('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN! –í—ã—Ö–æ–¥')
    exit(1)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    logging.info(message.chat.values)

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç) {message.chat.values['first_name']} ‚úåÔ∏è –Ø –¢–µ—Ä—Ä–∞-–±–æ—Ç üê∫\n–ï—Å–ª–∏ –≤—ã –º–µ–Ω—è –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –º–Ω–µ.\n–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É ‚úç")

@dp.message_handler(commands=['dice'])
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji='üé≤')

@dp.message_handler(commands=['registration'])
async def cmd_registration(message: types.Message):
    user_meta = message.chat.values
    our_user = session.query(User).filter_by(t_chat_id=user_meta['id']).first()
    if our_user:
        await message.reply(f'–Ø —Ç–µ–±—è —É–∂–µ –∑–Ω–∞—é) –¢—ã {user_meta["first_name"]} {user_meta["last_name"]}')
    else:
        new_user = User(
            user_meta['id'],
            user_meta['username'],
            user_meta['first_name'],
            user_meta['last_name'],
        )
        session.add(new_user)
        session.commit()
        await message.reply(f'–û–∫, —Å—á–∏—Ç–∞–π —Ç–µ–±—è –∑–∞—Ä–µ–≥–∞–ª–∞, —Ç—ã —Å –Ω–∞–º–∏!')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)